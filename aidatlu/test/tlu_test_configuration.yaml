################################################
#                                              #
# This configuration is only used during tests #
# Changing settings besides MOCK lead to fails #
#                                              #
################################################

# Use mock I2C
MOCK: True # This setting is ignored outside of tests

internal_trigger: #Generate TLU internal trigger with given rate in Hz
  internal_trigger_rate: 100000

dut_module:
  dut_1:
    mode: 'aida'  # 'aida', 'aidatrig', 'eudet', 'any'
  dut_2:
    mode: 'eudet'  # 'aida', 'aidatrig', 'eudet', 'any'
  dut_3:
    mode: 'aidatrig'  # 'aida', 'aidatrig', 'eudet', 'any'
  dut_4:
    mode: 'off'  # 'aida', 'aidatrig', 'eudet', 'any'

trigger_inputs: # Threshold voltages for the trigger inputs in V.
  threshold:
    threshold_1: -0.1
    threshold_2: -0.2
    threshold_3: -0.3
    threshold_4: -0.4
    threshold_5: -0.5
    threshold_6: -0.6

  # Trigger Logic configuration accept a python expression for the trigger inputs.
  # The logic is set by using the variables for the input channels 'CH1', 'CH2', 'CH3', 'CH4', 'CH5' and 'CH6'
  # and the Python bitwise operators AND: '&', OR: '|', NOT: '~' and so on. Dont forget to use brackets...
  trigger_inputs_logic: (CH1 & CH2) | CH3

  trigger_polarity:  # TLU triggers on rising (0) or falling (1) edge
    polarity: falling

  trigger_signal_shape:  # Stretches and delays each trigger input signal for an number of clock cycles,
    stretch: [2, 2, 3, 2, 2, 2]
    delay: [0, 1, 0, 0, 3, 0]

clock_lemo:
  enable_clock_lemo_output: True

pmt_control:
  # PMT control voltages in V
  pmt_1: 0.8
  pmt_2: 0.8
  pmt_3: 0
  pmt_4: -0.2

# Save data and generate interpreted data from the raw data set. Set to 'True' or 'False'.
save_data: True
output_data_path: 'test_output_data/'

# zmq connection leave it blank or set to 'off' if not needed
zmq_connection: 'off'  #"tcp://:7500"

timeout: 5
